pwd     --   Print working Directory: Imprime la ruta del folder donde estamos actualmente.
ls      --   short listing: muestra todos los folders y archivos debajo de la ruta actual
cd      --   Change Directory: te mueves a la carpeta seleccionada con el nombre que da el comando ls.
ls -l  --    long listing: Da una vista detallada de TODO lo que hay en la ruta actual con datos de los elementos.
cd ..   --   te mueves al folder de arriba (parent folder)
cd ~    --   te mueves al directorio home (/c/Users/abpdyzz)
clear   --   limpia terminal
cd /    --   te manda al root Directory.

mkdir   --   Make Directory
touch   --   crea file si no existe, si existe, modifica

git init--  inicializa un git repositry vacio
ls -a   --  ls show all (including hidden files)

git status  -- muestra el estado del repositorio y en que branch estas. tambien muestra los untracked files (sin stage para el commit)
"El commit es un snapshot de los files que se seleciconen en un punto en el tiempo"
git add     --  añade un archivo o folder como un archivo con tracking en el repo de git. esto permite que si hay un cambio, git sepa que está pendiente hacer un commit.
git add .   -- añade todos los archivos del dir actual al stage del git
git commit -m "mensaje" -- hace commit a todos los archivos que están en el staging area (que se les hizo git add) en el repo. siempre se debe agregar un mensaje (version o lo que sea. Mejor que sea estandarizado).
git log    --  da una lista de todos los commits pasados. (si se queda como colgado mostrando el log, presionar tecla 'q')
git commit -a -- hace add y commit al mismo tiempo (le da add a los archivos que ya estaban antes) y abre una ventana para agregar el comentario. Este comentario se agrega en la rimera línea del editor de texto. se le da save y se cierra.
git commit -a -m "mensaje" -- hace git add y commit al mismo tiempo y evitas el pop up pidiendo el mensaje.

git revert COMMIT_HASH  --  devuelve tus archivos al estado del commit anterior al que estas seleccionando y crea un commit nuevo.
git revert -n COMMIT_HASH   --  devuelve tus archivos al estado del commit anterior al que estas seleccionando. el modifier -n hace que deje los cambios en staged sin hacer el commit (hay que hacerlo manual)

git reset COMMIT_HASH -- olvida los commits que están después del seleccionado.
git reset COMMIT_HASH --hard -- olvida los commits que están después del seleccionado. el modifier --hard hace que los archivos también se devuelvan al estado anterior

"git revert revierte los cambios que se hicieron en el commit seleciconado y te los deja como el commit anterior"
"git reset te devuelve al estado que tenías en el commit seleccionado y borra todos los commits que hay a habido después (si lleva el modifier --hard, regresa tambien el estado de los archivos, no solo el git log)"

git revert HEAD hecha para atrás el último cambio que se hizo.
git reset HEAD~n hecha para atrás n commits desde el último.

"El revert se usa para cuando puedes hechar para atrás y no importa que quede la historia en el log."

"El reset se usa para cuando quieres hechar para atrás y no quieres que quede la historia en el log. 
    por ejemplo: si haces commit con una contraseña en el archivo y no quieres que eso quede en el log."

"git branch abre un branch donde se puede trabajar con una versión diferente sin modificar la linea principal del log"

git branch nombre_de_branch -- crea el branch desde el commit actual
git branch  --  imprime la lista de branches de la instancia de git.

git checkout nombre_de_branch  -- activa el branch seleccionado..

git merge   --  permite unir un branch a otro (normalmente al master) (se debe estar en el branch "principal")

"cuando hay un conflicto haciendo un merge, solo es cuestion de abrir los archivos que tuvieron problemas y dejar en el archivo lo que quieres que se quede. Darle save y luego commit"

git branch -d nombre_de_branch  --  Borra un branch completo

git diff    --  te indica cuales son los cambios que han habido en un file vs su ultimo commit en el branch actual. Par salir, preionar tecla 'q'.

git remote  --  muestra la lista de repositorios remotos asociados a tu repositorio local
git remote add Nombre_De_Repositorio_Remoto Ruta_de_repositorio_remoto  --  añade repo remoto al repo local

git push Nombre_De_Repositorio_Remoto Nombre_De_branch_local    --  manda el branch local al repositorio remoto
git push --all Nombre_De_Repositorio_Remoto     --  manda todos los branches al repo remoto
git push -u Nombre_De_Repositorio_Remoto Nombre_De_branch_local     --  hace que si se comanda "git push", git mande el Nombre_De_branch_local que se asigna con el -u